{"ast":null,"code":"// this file configures require.js based on environment\n'use strict';\n\nvar inBrowser = typeof define === 'function' && typeof define.amd === 'object';\n\nvar _extend = function (a, b) {\n  for (var prop in b) {\n    var supplied = b[prop];\n\n    if (Object.prototype.toString.call(supplied) === '[object Object]') {\n      a[prop] = a[prop] || {};\n\n      _extend(a[prop], supplied);\n    } else {\n      a[prop] = b[prop];\n    }\n  }\n};\n\nvar baseRequireConfig = {\n  optimize: 'none',\n  generateSourceMaps: false,\n  optimizeCss: 'none',\n  useStrict: true,\n  include: ['modernizr-init'],\n  fileExclusionRegExp: /^(.git|node_modules|modulizr|media|test)$/,\n  wrap: {\n    start: '\\n;(function(scriptGlobalObject, window, document, undefined){',\n    end: '})(window, window, document);'\n  },\n  onBuildWrite: function (id, path, contents) {\n    if (this.optimize === 'uglify') {\n      // strip out documentation comments\n      contents = contents.replace(/\\/\\*\\![\\s\\S]*\\!\\*\\//m, '');\n    }\n\n    if (/define\\(.*?\\{/.test(contents)) {\n      // remove AMD ceremony for use without require.js or almond.js\n      contents = contents.replace(/define\\(.*?\\{/, '');\n      contents = contents.replace(/\\}\\);\\s*?$/, '');\n\n      if (!contents.match(/Modernizr\\.add(Async)?Test\\(/)) {\n        // remove last return statement and trailing })\n        contents = contents.replace(/return.*[^return]*$/, '');\n      }\n    } else if (/require\\([^\\{]*?\\{/.test(contents)) {\n      contents = contents.replace(/require[^\\{]+\\{/, '');\n      contents = contents.replace(/\\}\\);\\s*$/, '');\n    }\n\n    contents = contents.replace(/return addTest;/, '');\n    return contents;\n  }\n};\n\nfunction build(generate, generateBanner, pkg) {\n  return function build(config, cb) {\n    var requireConfig = {};\n    var banner;\n    config = config || {};\n\n    cb = cb || function noop() {};\n\n    _extend(requireConfig, baseRequireConfig);\n\n    requireConfig.rawText = {\n      'modernizr-init': generate(config)\n    };\n\n    if (config.minify) {\n      banner = generateBanner('compact', config);\n      requireConfig.optimize = 'uglify';\n      requireConfig.uglify = {\n        mangle: {\n          except: ['Modernizr']\n        },\n        beautify: {\n          ascii_only: true\n        }\n      };\n    } else {\n      banner = generateBanner('full', config);\n      requireConfig.optimize = 'none';\n    }\n\n    if (config.scriptGlobalName) {\n      requireConfig.wrap.end = '})(' + config.scriptGlobalName + ', window, document);';\n    }\n\n    requireConfig.out = function (output) {\n      output = banner + output; // Remove `define('modernizr-init' ...)` and `define('modernizr-build' ...)`\n\n      output = output.replace(/(,\\s*)?define\\(\"modernizr-(init|build)\",\\s*function\\(\\)\\{\\};?\\)/g, '');\n      output = output.replace(/__VERSION__/g, pkg.version); // Hack the prefix into place. Anything is way too big for something so small.\n\n      if (config && config.classPrefix) {\n        output = output.replace(/(classPrefix'?:\\s?)['\"]{2}(,)/, '$1\\'' + config.classPrefix.replace(/'/g, '\\\\\\'') + '\\'$2');\n      }\n\n      ['enableClasses', 'enableJSClass', 'usePrefixes'].forEach(function (configName) {\n        if (config && typeof config[configName] === 'boolean') {\n          output = output.replace(new RegExp('(' + configName + '\\\\\\'?\\\\s?:\\\\s?)(true|false)([,\\\\n])'), '$1' + Boolean(config[configName]) + '$3');\n        }\n      });\n      cb(output);\n    };\n\n    requirejs.optimize(requireConfig);\n  };\n}\n\nif (inBrowser) {\n  var suppliedConfig = self._modernizrConfig;\n  var metadataUrl = 'i/js/metadata.json';\n  var packageUrl = 'i/js/modernizr-git/package.json';\n  baseRequireConfig.baseUrl = '/i/js/modernizr-git/src';\n  baseRequireConfig.paths = {\n    text: '/i/js/requirejs-plugins/lib/text',\n    lib: '/i/js/modernizr-git/lib',\n    json: '/i/js/requirejs-plugins/src/json',\n    lodash: '/i/js/lodash',\n    test: '/i/js/modernizr-git/feature-detects'\n  };\n\n  if (suppliedConfig) {\n    metadataUrl = suppliedConfig.metadataUrl || metadataUrl;\n    packageUrl = suppliedConfig.packageUrl || packageUrl;\n\n    _extend(baseRequireConfig, suppliedConfig);\n  }\n\n  if (self._modernizrMetadata) {\n    requirejs.define('metadata', [], function () {\n      return self._modernizrMetadata;\n    });\n  } else {\n    requirejs.define('metadata', ['json!' + metadataUrl], function (pkg) {\n      return pkg;\n    });\n  }\n\n  requirejs.define('package', ['json!' + packageUrl], function (pkg) {\n    return pkg;\n  });\n} else {\n  var requirejs = require('requirejs');\n\n  var metadata = require('./metadata')();\n\n  var pkgj = require('../package.json');\n\n  requirejs.define('metadata', [], function () {\n    return metadata;\n  });\n  requirejs.define('package', function () {\n    return pkgj;\n  });\n  baseRequireConfig.baseUrl = __dirname + '/../src';\n  baseRequireConfig.paths = {\n    lodash: require.resolve('lodash').replace(/\\.[^/.]+$/, \"\"),\n    test: __dirname + '/../feature-detects',\n    lib: __dirname\n  };\n}\n\nrequirejs.config(baseRequireConfig);\n\nif (inBrowser) {\n  define('build', ['generate', 'lib/generate-banner', 'package'], build);\n} else {\n  var generateBanner = requirejs(__dirname + '/generate-banner.js');\n  var generate = requirejs('generate');\n  var pakg = requirejs('package');\n  var _build = build;\n\n  module.exports = function build() {\n    return _build(generate, generateBanner, pakg).apply(undefined, arguments);\n  };\n}","map":{"version":3,"sources":["/home/kilberty/softcom/node_modules/modernizr/lib/build.js"],"names":["inBrowser","define","amd","_extend","a","b","prop","supplied","Object","prototype","toString","call","baseRequireConfig","optimize","generateSourceMaps","optimizeCss","useStrict","include","fileExclusionRegExp","wrap","start","end","onBuildWrite","id","path","contents","replace","test","match","build","generate","generateBanner","pkg","config","cb","requireConfig","banner","noop","rawText","minify","uglify","mangle","except","beautify","ascii_only","scriptGlobalName","out","output","version","classPrefix","forEach","configName","RegExp","Boolean","requirejs","suppliedConfig","self","_modernizrConfig","metadataUrl","packageUrl","baseUrl","paths","text","lib","json","lodash","_modernizrMetadata","require","metadata","pkgj","__dirname","resolve","pakg","_build","module","exports","apply","undefined","arguments"],"mappings":"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","sourcesContent":["// this file configures require.js based on environment\n'use strict';\n\nvar inBrowser = typeof define === 'function' && typeof define.amd === 'object';\n\nvar _extend = function(a, b) {\n  for (var prop in b) {\n    var supplied = b[prop];\n    if (Object.prototype.toString.call(supplied) === '[object Object]') {\n      a[prop] = a[prop] || {};\n      _extend(a[prop], supplied);\n    } else {\n      a[prop] = b[prop];\n    }\n  }\n};\n\nvar baseRequireConfig = {\n  optimize: 'none',\n  generateSourceMaps: false,\n  optimizeCss: 'none',\n  useStrict: true,\n  include: ['modernizr-init'],\n  fileExclusionRegExp: /^(.git|node_modules|modulizr|media|test)$/,\n  wrap: {\n    start: '\\n;(function(scriptGlobalObject, window, document, undefined){',\n    end: '})(window, window, document);'\n  },\n  onBuildWrite: function(id, path, contents) {\n    if (this.optimize === 'uglify') {\n      // strip out documentation comments\n      contents = contents.replace(/\\/\\*\\![\\s\\S]*\\!\\*\\//m, '');\n    }\n\n    if ((/define\\(.*?\\{/).test(contents)) {\n      // remove AMD ceremony for use without require.js or almond.js\n      contents = contents.replace(/define\\(.*?\\{/, '');\n\n      contents = contents.replace(/\\}\\);\\s*?$/, '');\n\n      if (!contents.match(/Modernizr\\.add(Async)?Test\\(/)) {\n      // remove last return statement and trailing })\n        contents = contents.replace(/return.*[^return]*$/, '');\n      }\n    } else if ((/require\\([^\\{]*?\\{/).test(contents)) {\n      contents = contents.replace(/require[^\\{]+\\{/, '');\n      contents = contents.replace(/\\}\\);\\s*$/, '');\n    }\n\n    contents = contents.replace(/return addTest;/, '');\n\n    return contents;\n  }\n};\n\nfunction build(generate, generateBanner, pkg) {\n  return function build(config, cb) {\n    var requireConfig = {};\n    var banner;\n    config = config || {};\n    cb = cb || function noop() {};\n\n    _extend(requireConfig, baseRequireConfig);\n\n    requireConfig.rawText = {\n      'modernizr-init': generate(config)\n    };\n\n    if (config.minify) {\n      banner = generateBanner('compact', config);\n      requireConfig.optimize = 'uglify';\n      requireConfig.uglify = {\n        mangle: {\n          except: ['Modernizr']\n        },\n        beautify: {\n          ascii_only: true\n        }\n      };\n    } else {\n      banner = generateBanner('full', config);\n      requireConfig.optimize = 'none';\n    }\n\n    if(config.scriptGlobalName) {\n      requireConfig.wrap.end = '})(' + config.scriptGlobalName + ', window, document);';\n    }\n\n    requireConfig.out = function(output) {\n      output = banner + output;\n\n      // Remove `define('modernizr-init' ...)` and `define('modernizr-build' ...)`\n      output = output.replace(/(,\\s*)?define\\(\"modernizr-(init|build)\",\\s*function\\(\\)\\{\\};?\\)/g, '');\n      output = output.replace(/__VERSION__/g, pkg.version);\n\n      // Hack the prefix into place. Anything is way too big for something so small.\n      if (config && config.classPrefix) {\n        output = output.replace(/(classPrefix'?:\\s?)['\"]{2}(,)/, '$1\\'' + config.classPrefix.replace(/'/g, '\\\\\\'') + '\\'$2');\n      }\n      ['enableClasses', 'enableJSClass', 'usePrefixes'].forEach(function(configName) {\n        if (config && typeof config[configName] === 'boolean') {\n          output = output.replace(new RegExp('(' + configName + '\\\\\\'?\\\\s?:\\\\s?)(true|false)([,\\\\n])'), '$1' + Boolean(config[configName]) + '$3');\n        }\n      });\n\n      cb(output);\n    };\n\n    requirejs.optimize(requireConfig);\n  };\n}\n\nif (inBrowser) {\n  var suppliedConfig = self._modernizrConfig;\n  var metadataUrl = 'i/js/metadata.json';\n  var packageUrl = 'i/js/modernizr-git/package.json';\n  baseRequireConfig.baseUrl = '/i/js/modernizr-git/src';\n  baseRequireConfig.paths = {\n    text: '/i/js/requirejs-plugins/lib/text',\n    lib: '/i/js/modernizr-git/lib',\n    json: '/i/js/requirejs-plugins/src/json',\n    lodash: '/i/js/lodash',\n    test: '/i/js/modernizr-git/feature-detects'\n  };\n\n  if (suppliedConfig) {\n    metadataUrl = suppliedConfig.metadataUrl || metadataUrl;\n    packageUrl = suppliedConfig.packageUrl || packageUrl;\n    _extend(baseRequireConfig, suppliedConfig);\n  }\n\n  if (self._modernizrMetadata) {\n    requirejs.define('metadata', [], function() {return self._modernizrMetadata;});\n  } else {\n    requirejs.define('metadata', ['json!' + metadataUrl], function(pkg) {return pkg;});\n  }\n  requirejs.define('package', ['json!' + packageUrl], function(pkg) {return pkg;});\n} else {\n  var requirejs = require('requirejs');\n  var metadata = require('./metadata')();\n  var pkgj = require('../package.json');\n\n  requirejs.define('metadata', [], function() {return metadata;});\n  requirejs.define('package', function() {return pkgj;});\n\n  baseRequireConfig.baseUrl = __dirname + '/../src';\n  baseRequireConfig.paths = {\n    lodash: require.resolve('lodash').replace(/\\.[^/.]+$/, \"\"),\n    test: __dirname + '/../feature-detects',\n    lib: __dirname\n  };\n}\n\nrequirejs.config(baseRequireConfig);\n\nif (inBrowser) {\n  define('build', ['generate', 'lib/generate-banner', 'package'], build);\n} else {\n  var generateBanner = requirejs(__dirname + '/generate-banner.js');\n  var generate = requirejs('generate');\n  var pakg = requirejs('package');\n  var _build = build;\n  module.exports = function build() {\n    return _build(generate, generateBanner, pakg).apply(undefined, arguments);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}