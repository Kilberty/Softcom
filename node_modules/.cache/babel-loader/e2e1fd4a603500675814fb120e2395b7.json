{"ast":null,"code":"var fs = require('fs');\n\nvar file = require('file');\n\nvar MarkdownIt = require('markdown-it');\n\nvar polyfills = require('./polyfills.json');\n\nvar viewRoot = fs.realpathSync(__dirname + '/../feature-detects');\n\nfunction metadata(cb) {\n  var tests = [];\n  var md = new MarkdownIt();\n  file.walkSync(viewRoot, function (start, dirs, files) {\n    files.forEach(function (file) {\n      if (file === '.DS_Store') {\n        return;\n      }\n\n      var test = fs.readFileSync(start + '/' + file, 'utf8'); // TODO:: make this regex not suck\n\n      var metaRE = /\\/\\*\\!([\\s\\S]*)\\!\\*\\//m;\n      var matches = test.match(metaRE);\n      var docRE = /\\/\\*\\sDOC([\\s\\S]*?)\\*\\//m;\n      var docmatches = test.match(docRE);\n      var depRE = /define\\((\\[[^\\]]*\\]),/;\n      var depMatches = test.match(depRE);\n      var metadata;\n\n      if (matches && matches[1]) {\n        try {\n          metadata = JSON.parse(matches[1]);\n        } catch (e) {\n          throw new Error('Error Parsing Metadata: ' + file + '\\nInput: `' + matches[1] + '`');\n        }\n      } else {\n        metadata = {};\n      }\n\n      var docs = null;\n\n      if (docmatches && docmatches[1]) {\n        docs = md.render(docmatches[1].trim());\n      }\n\n      metadata.doc = docs;\n      var deps = [];\n      var matchedDeps;\n\n      if (depMatches && depMatches[1]) {\n        try {\n          matchedDeps = JSON.parse(depMatches[1].replace(/'/g, '\"'));\n        } catch (e) {\n          throw new Error('Couldn\\'t parse dependencies for `' + file + '`:\\n`' + depMatches[1] + '\\n`');\n        }\n\n        matchedDeps.forEach(function (dep) {\n          if (dep === 'Modernizr') {\n            return;\n          }\n\n          deps.push(dep);\n        });\n      } else {\n        throw new Error('Couldn\\'t find the define for `' + file + '`');\n      }\n\n      metadata.deps = deps;\n\n      var baseDir = __dirname.replace(/lib$/, '');\n\n      metadata.path = './' + (start + '/' + file).replace(baseDir, '').replace(/\\\\/g, '/');\n      metadata.amdPath = metadata.path.replace(/^\\.\\/feature\\-detects/, 'test').replace(/\\.js$/i, '');\n\n      if (!metadata.name) {\n        metadata.name = metadata.amdPath;\n      }\n\n      var pfs = [];\n\n      if (metadata.polyfills && metadata.polyfills.length) {\n        metadata.polyfills.forEach(function (polyname) {\n          if (polyfills[polyname]) {\n            pfs.push(polyfills[polyname]);\n          } else {\n            throw new Error(metadata.name + ': Polyfill not found in `' + file + '`: ' + polyname);\n          }\n        });\n      }\n\n      metadata.polyfills = pfs;\n\n      if (!metadata.async) {\n        metadata.async = false;\n      }\n\n      if (!metadata.notes) {\n        metadata.notes = [];\n      }\n\n      if (!metadata.warnings) {\n        metadata.warnings = [];\n      }\n\n      if (!metadata.caniuse) {\n        metadata.caniuse = null;\n      }\n\n      if (!metadata.cssclass && metadata.property) {\n        metadata.cssclass = metadata.property;\n      } else {\n        metadata.cssclass = null;\n      } // Maybe catch a bug\n\n\n      if (!metadata.doc && metadata.docs) {\n        metadata.doc = metadata.docs;\n        delete metadata.docs;\n      } // If you want markdown parsed code minus the docs and metadata, this'll do it.\n      // Off by default for now.\n      // metadata.code =  md.render('```javascript\\n' + test.replace(metaRE, '').replace(docRE, '') + '\\n```');\n\n\n      if (!metadata.tags) {\n        metadata.tags = [];\n      }\n\n      if (!metadata.authors) {\n        metadata.authors = [];\n      }\n\n      if (!metadata.knownBugs) {\n        metadata.knownBugs = [];\n      }\n\n      tests.push(metadata);\n    });\n  });\n\n  if (cb && typeof cb === 'function') {\n    return cb(tests);\n  }\n\n  return tests;\n}\n\nmodule.exports = metadata;","map":{"version":3,"sources":["/home/kilberty/softcom/node_modules/modernizr/lib/metadata.js"],"names":["fs","require","file","MarkdownIt","polyfills","viewRoot","realpathSync","__dirname","metadata","cb","tests","md","walkSync","start","dirs","files","forEach","test","readFileSync","metaRE","matches","match","docRE","docmatches","depRE","depMatches","JSON","parse","e","Error","docs","render","trim","doc","deps","matchedDeps","replace","dep","push","baseDir","path","amdPath","name","pfs","length","polyname","async","notes","warnings","caniuse","cssclass","property","tags","authors","knownBugs","module","exports"],"mappings":"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","sourcesContent":["var fs = require('fs');\nvar file = require('file');\nvar MarkdownIt = require('markdown-it');\nvar polyfills = require('./polyfills.json');\nvar viewRoot = fs.realpathSync(__dirname + '/../feature-detects');\n\nfunction metadata(cb) {\n  var tests = [];\n  var md = new MarkdownIt();\n  file.walkSync(viewRoot, function(start, dirs, files) {\n    files.forEach(function(file) {\n      if (file === '.DS_Store') {\n        return;\n      }\n      var test = fs.readFileSync(start + '/' + file, 'utf8');\n      // TODO:: make this regex not suck\n      var metaRE = /\\/\\*\\!([\\s\\S]*)\\!\\*\\//m;\n      var matches = test.match(metaRE);\n      var docRE = /\\/\\*\\sDOC([\\s\\S]*?)\\*\\//m;\n      var docmatches = test.match(docRE);\n      var depRE = /define\\((\\[[^\\]]*\\]),/;\n      var depMatches = test.match(depRE);\n\n      var metadata;\n\n      if (matches && matches[1]) {\n        try {\n          metadata = JSON.parse(matches[1]);\n        } catch (e) {\n          throw new Error('Error Parsing Metadata: ' + file + '\\nInput: `' + matches[1] + '`');\n        }\n      }\n      else {\n        metadata = {};\n      }\n\n      var docs = null;\n\n      if (docmatches && docmatches[1]) {\n        docs = md.render(docmatches[1].trim());\n      }\n\n      metadata.doc = docs;\n\n      var deps = [];\n      var matchedDeps;\n\n      if (depMatches && depMatches[1]) {\n        try {\n          matchedDeps = JSON.parse(depMatches[1].replace(/'/g, '\"'));\n        } catch (e) {\n          throw new Error('Couldn\\'t parse dependencies for `' + file + '`:\\n`' + depMatches[1] + '\\n`');\n        }\n        matchedDeps.forEach(function(dep) {\n          if (dep === 'Modernizr') {\n            return;\n          }\n          deps.push(dep);\n        });\n      } else {\n        throw new Error('Couldn\\'t find the define for `' + file + '`');\n      }\n      metadata.deps = deps;\n\n      var baseDir = __dirname.replace(/lib$/, '');\n      metadata.path = './' + (start + '/' + file).replace(baseDir, '').replace(/\\\\/g, '/');\n      metadata.amdPath = metadata.path.replace(/^\\.\\/feature\\-detects/, 'test').replace(/\\.js$/i, '');\n\n      if (!metadata.name) {\n        metadata.name = metadata.amdPath;\n      }\n\n      var pfs = [];\n      if (metadata.polyfills && metadata.polyfills.length) {\n        metadata.polyfills.forEach(function(polyname) {\n          if (polyfills[polyname]) {\n            pfs.push(polyfills[polyname]);\n          }\n          else {\n            throw new Error(metadata.name + ': Polyfill not found in `' + file + '`: ' + polyname);\n          }\n        });\n      }\n      metadata.polyfills = pfs;\n\n      if (!metadata.async) {\n        metadata.async = false;\n      }\n\n      if (!metadata.notes) {\n        metadata.notes = [];\n      }\n\n      if (!metadata.warnings) {\n        metadata.warnings = [];\n      }\n\n      if (!metadata.caniuse) {\n        metadata.caniuse = null;\n      }\n\n      if (!metadata.cssclass && metadata.property) {\n        metadata.cssclass = metadata.property;\n      } else {\n        metadata.cssclass = null;\n      }\n\n      // Maybe catch a bug\n      if (!metadata.doc && metadata.docs) {\n        metadata.doc = metadata.docs;\n        delete metadata.docs;\n      }\n\n      // If you want markdown parsed code minus the docs and metadata, this'll do it.\n      // Off by default for now.\n      // metadata.code =  md.render('```javascript\\n' + test.replace(metaRE, '').replace(docRE, '') + '\\n```');\n\n      if (!metadata.tags) {\n        metadata.tags = [];\n      }\n\n      if (!metadata.authors) {\n        metadata.authors = [];\n      }\n\n      if (!metadata.knownBugs) {\n        metadata.knownBugs = [];\n      }\n\n      tests.push(metadata);\n    });\n  });\n\n  if (cb && typeof cb === 'function') {\n    return cb(tests);\n  }\n  return tests;\n}\n\nmodule.exports = metadata;\n"]},"metadata":{},"sourceType":"script"}